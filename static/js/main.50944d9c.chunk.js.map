{"version":3,"sources":["component/CounterComponent/index.tsx","container/CounterConatiner/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CounterComponent","props","className","onClick","e","setCounterValue","counterValue","type","max","maxValue","value","onChange","target","CounterContainer","initialValue","App","useState","loading","setLoading","serviceTimer","setServiceTimer","useEffect","axios","get","then","response","data","catch","error","console","clearTimeout","setTimeout","put","counter1","log","finally","style","fontWeight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQAyCeA,EAtCU,SAACC,GACxB,OACE,sBAAKC,UAAU,oBAAf,UACE,wBACEA,UAAU,mBACVC,QAAS,SAACC,GACRH,EAAMI,gBAAgBJ,EAAMK,aAAe,IAH/C,eAQA,uBACEJ,UAAU,gBACVK,KAAK,SACLC,IAAKP,EAAMQ,SACXC,MAAOT,EAAMK,aACbK,SAAU,SAACP,GACT,IAAIM,GACDN,EAAEQ,OAAOF,OAAST,EAAMQ,UACpBL,EAAEQ,OAAOF,MACVT,EAAMQ,SACZR,EAAMI,gBAAgBK,MAG1B,wBACER,UAAU,mBACVC,QAAS,SAACC,GACJH,EAAMK,aAAeL,EAAMQ,UAC7BR,EAAMI,gBAAgBJ,EAAMK,aAAe,IAJjD,mBCVSO,EAfU,SAAC,GAKG,EAJ3BC,aAI4B,IAAD,IAH3BL,gBAG2B,MAHhB,IAGgB,EAF3BH,EAE2B,EAF3BA,aACAD,EAC2B,EAD3BA,gBAEA,OACE,cAAC,EAAD,CACEC,aAAcA,EACdG,SAAUA,EACVJ,gBAAiBA,K,gBCuDRU,MA9Df,WACE,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwCF,mBAAiB,GAAzD,mBAAOV,EAAP,KAAqBD,EAArB,KACA,EAAwCW,qBAAxC,mBAAOG,EAAP,KAAqBC,EAArB,KAyCA,OAvCAC,qBAAU,WACRC,IACGC,IACC,+EAEDC,MAAK,SAACC,GACLpB,EAAgBoB,EAASC,SAE1BC,OAAM,SAACC,GACNC,QAAQD,MAAMA,QAEjB,IA6BD,gCACGX,GACC,qBAAKf,UAAU,qBAAf,kCAEF,cAAC,EAAD,CACEO,SAAU,IACVH,aAAcA,EACdD,gBAlCsB,SAACK,GAC3BL,EAAgBK,GACVS,GACJW,aAAaX,GAEfC,EACEW,YAAW,WACTb,GAAW,GACXI,IACGU,IACC,qEACA,CAAEC,SAAUvB,IAEbc,MAAK,SAACC,GACLI,QAAQK,IAAIT,MAEbE,OAAM,SAACC,GACNC,QAAQD,MAAMA,MAEfO,SAAQ,WACPjB,GAAW,QAEd,SAcH,qBAAKkB,MAAO,CAAEC,WAAY,QAAUnC,UAAU,qBAA9C,2BAGA,qBAAKA,UAAU,qBAAf,SAAqCI,QChD5BgC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.50944d9c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./CounterComponent.css\";\r\n\r\nconst CounterComponent = (props: CounterComponentProps) => {\r\n  return (\r\n    <div className=\"counter-container\">\r\n      <button\r\n        className=\"decrement-button\"\r\n        onClick={(e) => {\r\n          props.setCounterValue(props.counterValue - 1);\r\n        }}\r\n      >\r\n        -\r\n      </button>\r\n      <input\r\n        className=\"counter-input\"\r\n        type=\"number\"\r\n        max={props.maxValue}\r\n        value={props.counterValue}\r\n        onChange={(e) => {\r\n          let value =\r\n            +e.target.value <= props.maxValue\r\n              ? +e.target.value\r\n              : props.maxValue;\r\n          props.setCounterValue(value);\r\n        }}\r\n      />\r\n      <button\r\n        className=\"increment-button\"\r\n        onClick={(e) => {\r\n          if (props.counterValue < props.maxValue) {\r\n            props.setCounterValue(props.counterValue + 1);\r\n          }\r\n        }}\r\n      >\r\n        +\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CounterComponent;\r\n\r\ninterface CounterComponentProps {\r\n  maxValue: number;\r\n  counterValue: number;\r\n  setCounterValue: (value: number) => void;\r\n}\r\n\r\n//deepak@quicksell.co\r\n","import CounterComponent from \"../../component/CounterComponent\";\r\n\r\nconst CounterContainer = ({\r\n  initialValue = 1,\r\n  maxValue = 1000,\r\n  counterValue,\r\n  setCounterValue\r\n}: CounterContainerProps) => {\r\n  return (\r\n    <CounterComponent\r\n      counterValue={counterValue}\r\n      maxValue={maxValue}\r\n      setCounterValue={setCounterValue}\r\n    ></CounterComponent>\r\n  );\r\n};\r\n\r\nexport default CounterContainer;\r\n\r\ninterface CounterContainerProps {\r\n  initialValue?: number;\r\n  maxValue?: number;\r\n  counterValue: number;\r\n  setCounterValue: (value: number) => void;\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport CounterContainer from \"./container/CounterConatiner\";\r\nimport axios from \"axios\";\r\n\r\nfunction App() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [counterValue, setCounterValue] = useState<number>(1);\r\n  const [serviceTimer, setServiceTimer] = useState<NodeJS.Timeout>();\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        \"https://interview-8e4c5-default-rtdb.firebaseio.com/front-end/counter1.json\"\r\n      )\r\n      .then((response) => {\r\n        setCounterValue(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n\r\n  const counterValueChanged = (value: number) => {\r\n    setCounterValue(value);\r\n    if (!!serviceTimer) {\r\n      clearTimeout(serviceTimer);\r\n    }\r\n    setServiceTimer(\r\n      setTimeout(() => {\r\n        setLoading(true);\r\n        axios\r\n          .put(\r\n            \"https://interview-8e4c5-default-rtdb.firebaseio.com/front-end.json\",\r\n            { counter1: value }\r\n          )\r\n          .then((response) => {\r\n            console.log(response);\r\n          })\r\n          .catch((error) => {\r\n            console.error(error);\r\n          })\r\n          .finally(() => {\r\n            setLoading(false);\r\n          });\r\n      }, 1000)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {loading && (\r\n        <div className=\"common-left-margin\">Saving counter value</div>\r\n      )}\r\n      <CounterContainer\r\n        maxValue={100}\r\n        counterValue={counterValue}\r\n        setCounterValue={counterValueChanged}\r\n      ></CounterContainer>\r\n      <div style={{ fontWeight: \"bold\" }} className=\"common-left-margin\">\r\n        Counter Value\r\n      </div>\r\n      <div className=\"common-left-margin\">{counterValue}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}