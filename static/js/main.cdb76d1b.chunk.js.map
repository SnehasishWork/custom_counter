{"version":3,"sources":["component/CounterComponent/index.tsx","container/CounterConatiner/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CounterComponent","props","className","onClick","e","onValueChange","counterValue","setCounterValue","type","max","maxValue","value","onChange","target","CounterContainer","initialValue","useState","App","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAkDeA,EA/CU,SAACC,GACxB,OACE,sBAAKC,UAAU,oBAAf,UACE,wBACEA,UAAU,mBACVC,QAAS,SAACC,GACJH,EAAMI,eACRJ,EAAMI,cAAcJ,EAAMK,aAAe,GAE3CL,EAAMM,gBAAgBN,EAAMK,aAAe,IAN/C,eAWA,uBACEJ,UAAU,gBACVM,KAAK,SACLC,IAAKR,EAAMS,SACXC,MAAOV,EAAMK,aACbM,SAAU,SAACR,GACT,IAAIO,GACDP,EAAES,OAAOF,OAASV,EAAMS,UACpBN,EAAES,OAAOF,MACVV,EAAMS,SACRT,EAAMI,eACRJ,EAAMI,cAAcM,GAEtBV,EAAMM,gBAAgBI,MAG1B,wBACET,UAAU,mBACVC,QAAS,SAACC,GACJH,EAAMK,aAAeL,EAAMS,WACzBT,EAAMI,eACRJ,EAAMI,cAAcJ,EAAMK,aAAe,GAE3CL,EAAMM,gBAAgBN,EAAMK,aAAe,KAPjD,mBCTSQ,EArBU,SAAC,GAII,IAAD,IAH3BC,oBAG2B,MAHZ,EAGY,MAF3BL,gBAE2B,MAFhB,IAEgB,EAD3BL,EAC2B,EAD3BA,cAEA,EAAwCW,mBAAiBD,GAAzD,mBAAOT,EAAP,KAAqBC,EAArB,KAMA,OACE,cAAC,EAAD,CACED,aAAcA,EACdI,SAAUA,EACVL,cAAeA,EACfE,gBAAiBA,KCERU,MAhBf,WACE,OACE,gCACE,cAAC,EAAD,CACEP,SAAU,IACVK,aAAc,EACdV,cAAe,SAACM,GACdO,QAAQC,IAAIR,MAGhB,yDACA,+DCFSS,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.cdb76d1b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./CounterComponent.css\";\r\n\r\nconst CounterComponent = (props: CounterComponentProps) => {\r\n  return (\r\n    <div className=\"counter-container\">\r\n      <button\r\n        className=\"decrement-button\"\r\n        onClick={(e) => {\r\n          if (props.onValueChange) {\r\n            props.onValueChange(props.counterValue - 1);\r\n          }\r\n          props.setCounterValue(props.counterValue - 1);\r\n        }}\r\n      >\r\n        -\r\n      </button>\r\n      <input\r\n        className=\"counter-input\"\r\n        type=\"number\"\r\n        max={props.maxValue}\r\n        value={props.counterValue}\r\n        onChange={(e) => {\r\n          let value =\r\n            +e.target.value <= props.maxValue\r\n              ? +e.target.value\r\n              : props.maxValue;\r\n          if (props.onValueChange) {\r\n            props.onValueChange(value);\r\n          }\r\n          props.setCounterValue(value);\r\n        }}\r\n      />\r\n      <button\r\n        className=\"increment-button\"\r\n        onClick={(e) => {\r\n          if (props.counterValue < props.maxValue) {\r\n            if (props.onValueChange) {\r\n              props.onValueChange(props.counterValue + 1);\r\n            }\r\n            props.setCounterValue(props.counterValue + 1);\r\n          }\r\n        }}\r\n      >\r\n        +\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CounterComponent;\r\n\r\ninterface CounterComponentProps {\r\n  maxValue: number;\r\n  onValueChange?: (value: number) => void;\r\n  counterValue: number;\r\n  setCounterValue: (value: number) => void;\r\n}\r\n","import React, { useState } from \"react\";\r\nimport CounterComponent from \"../../component/CounterComponent\";\r\n\r\nconst CounterContainer = ({\r\n  initialValue = 1,\r\n  maxValue = 1000,\r\n  onValueChange\r\n}: CounterContainerProps) => {\r\n  const [counterValue, setCounterValue] = useState<number>(initialValue);\r\n\r\n  const getCurrentValue = () => {\r\n    return counterValue;\r\n  };\r\n\r\n  return (\r\n    <CounterComponent\r\n      counterValue={counterValue}\r\n      maxValue={maxValue}\r\n      onValueChange={onValueChange}\r\n      setCounterValue={setCounterValue}\r\n    ></CounterComponent>\r\n  );\r\n};\r\n\r\nexport default CounterContainer;\r\n\r\ninterface CounterContainerProps {\r\n  initialValue?: number;\r\n  maxValue?: number;\r\n  onValueChange?: (value: number) => void;\r\n}\r\n","import React from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport CounterContainer from \"./container/CounterConatiner\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <CounterContainer\r\n        maxValue={100}\r\n        initialValue={5}\r\n        onValueChange={(value) => {\r\n          console.log(value);\r\n        }}\r\n      ></CounterContainer>\r\n      <div>Current Max Value: 100</div>\r\n      <div>Current Initial Value: 5</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}